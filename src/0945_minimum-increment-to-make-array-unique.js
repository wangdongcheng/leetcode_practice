// 945. Minimum Increment to Make Array Unique
// Given an array of integers A, a move consists of choosing any A[i], and incrementing it by 1.

// Return the least number of moves to make every value in A unique.

// Example 1:
// Input: [1,2,2]
// Output: 1
// Explanation:  After 1 move, the array could be [1, 2, 3].

// Example 2:
// Input: [3,2,1,2,1,7]
// Output: 6
// Explanation:  After 6 moves, the array could be [3, 4, 1, 2, 5, 7].
// It can be shown with 5 or less moves that it is impossible for the array to have all unique values.

// Note:
// 0 <= A.length <= 40000
// 0 <= A[i] < 40000

/**
 * @param {number[]} A
 * @return {number}
 */
var minIncrementForUnique = function (A) {
    if (A.length === 0) return 0;

    let uniqueArr = [],
        dupliArr = [],
        vancArr = [],
        sortedA = A,
        i = 0,
        moveCnt = 0;

    sortedA.sort((a, b) => { return a - b; });

    while (i < sortedA.length) {
        if (sortedA.lastIndexOf(sortedA[i]) != i) {
            dupliArr.push(sortedA[i])
        } else {
            uniqueArr.push(sortedA[i]);
        }
        i++;
    }

    if (dupliArr.length === 0) return 0;

    let tail = uniqueArr.length - 1;
    for (let i = uniqueArr[0]; i <= uniqueArr[tail]; i++) {
        if (uniqueArr.indexOf(i) === -1) vancArr.push(i);
    }

    let j = 0;
    while (j < vancArr.length && dupliArr.length > 0 && vancArr.length > 0) {
        if (dupliArr[0] < vancArr[j]) {
            moveCnt += (vancArr[j] - dupliArr[0]);
            dupliArr.shift();
            uniqueArr.push(vancArr[j]);
            vancArr.splice(j, 1);
        } else {
            j++;
        }
    }

    let newMax = Math.max(...uniqueArr) + 1;
    while (dupliArr.length > 0) {
        moveCnt += (newMax - dupliArr[0]);
        uniqueArr.push(newMax);
        dupliArr.shift();
        uniqueArr.push()
        newMax++;
    }

    return moveCnt;
};


console.log(minIncrementForUnique([1, 2, 3, 2]), 2);
console.log(minIncrementForUnique([3, 2, 1, 2, 1, 7]), 6);
console.log(minIncrementForUnique([3, 2, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 1, 2, 1, 7]), 122);
console.log(minIncrementForUnique([1, 2, 3, 87, 34, 2, 4, 3, 5, 2, 88, 6, 3, 25, 8, 7, 66, 2, 3, 6, 9, 8, 7, 55, 89, 56, 23, 78, 41, 258, 96, 326, 14, 5, 7, 3, 9, 95, 2]), 182);

console.log(minIncrementForUnique([15781, 26207, 24203, 22558, 22936, 15256, 4019, 22296, 16652, 7753, 14933, 18082, 12506, 20019, 15286, 14222, 11381, 15631, 26217, 13670, 19904, 15127, 26307, 656, 24638, 1646, 14853, 12638, 2413, 9114, 24392, 24066, 11833, 22180, 14330, 3556, 5308, 6545, 19355, 5758, 11090, 10914, 2431, 9388, 13737, 13512, 1228, 8039, 9903, 6164, 26618, 18861, 7722, 17955, 25083, 8663, 19290, 1989, 11443, 19170, 23989, 25157, 11772, 14495, 21032, 6110, 16978, 5954, 18968, 6363, 8777, 20108, 11768, 18608, 15738, 9424, 19918, 8132, 2690, 10395, 23656, 14369, 11546, 18564, 7978, 12795, 8389, 12812, 19120, 10296, 15438, 12108, 7914, 451, 23164, 19407, 21109, 6797, 13651, 13015, 16322, 6933, 12249, 13609, 1724, 13296, 1679, 822, 23588, 14306, 1135, 9547, 3230, 6927, 26367, 5807, 18873, 13912, 4299, 21777, 25005, 314, 26222, 19092, 12977, 23939, 5492, 1822, 21304, 24143, 23052, 24895, 19983, 4570, 372, 11737, 217, 15977, 21644, 13891, 26544, 4828, 23510, 25484, 594, 16107, 22587, 8852, 8499, 18422, 13389, 26269, 25785, 18921, 16088, 3604, 25356, 22381, 24556, 7366, 23693, 10032, 2323, 14150, 2216, 16073, 1758, 6389, 12567, 20042, 4041, 7389, 4094, 4499, 14378, 5068, 15934, 18840, 24510, 7159, 15482, 11623, 3906, 4642, 23699, 16770, 12882, 21650, 9480, 2865, 204, 8411, 24697, 23246, 21122, 18534, 24802, 25670, 8590, 4054, 22390, 12871, 5670, 1672, 20393, 11410, 12859, 11873, 7292, 900, 11766, 12009, 25300, 16669, 25082, 12863, 15806, 19215, 5015, 3050, 4232, 20471, 4306, 4831, 3141, 5726, 14894, 7816, 11580, 5405, 16714, 24737, 8246, 2582, 25071, 1226, 10509, 48, 15318, 1196, 2611, 22036, 11234, 16140, 23478, 14480, 26440, 25010, 3447, 6446, 19100, 24863, 26265, 10145, 20205, 5375, 16499, 20208, 23472, 4510, 19470, 14601, 15380, 9914, 14474, 14521, 9776, 13593, 22570, 24918, 19920, 15950, 16524, 10238, 19621, 26532, 23327, 4414, 1386, 6073, 530, 20591, 3694, 25178, 14208, 7545, 5044, 11670, 13420, 26107, 16652, 4201, 4322, 11397, 22609, 3618, 14120, 18446, 10014, 1821, 14151, 7077, 21040, 19129, 24868, 13250, 25478, 11561, 17781, 2882, 12568, 768, 7533, 24363, 12093, 20751, 6906, 14288, 2597, 20163, 8706, 10536, 12454, 22427, 16281, 14276, 19258, 25828, 19701, 11949, 11502, 6518, 20982, 7505, 12663, 19370, 12851, 12998, 1361, 14543, 16516, 22654, 3868, 12607, 20367, 14752, 15626, 22034, 16138, 12848, 14321, 13178, 8340, 13853, 19983, 9210, 2727, 16880, 2087, 8980, 4256, 11335, 10754, 17150, 20043, 18413, 1282, 25658, 9649, 138, 24589, 15315, 3562, 20317, 10020, 14865, 6862, 26506, 19814, 24514, 23182, 1693, 1504, 22610, 11152, 6060, 20647, 8172, 19606, 12859, 3655, 20855, 6633, 17256, 15673, 1023, 16280, 24852, 18446, 20838, 13872, 5027, 15773, 19876, 1536, 5257, 5359, 6704, 20366, 21325, 9589, 1375, 16123, 21541, 14014, 18540, 14955, 25914, 3727, 7342, 23898, 17227, 23485, 9100, 5255, 4194, 2824, 17661, 14421, 15002, 6384, 16282, 2731, 26575, 4390, 9764, 17603, 4535, 13042, 19559, 26382, 21917, 602, 1365, 23482, 8834, 1300, 24826, 18014, 24611, 7876, 10678, 19076, 16503, 9719, 17144, 12791, 13064, 26300, 24547, 12867, 21505, 24570, 23784, 24732, 16787, 17, 9594, 2254, 17719, 23693, 12432, 7325, 23077, 18358, 21134, 24593, 19395, 22706, 13204, 6304, 9328, 25504, 21707, 12971, 20504, 1181, 20877, 3447, 3757, 13792, 5327, 10393, 23655, 4700, 5523, 1170, 25597, 777, 25844, 9175, 4758, 24805, 13770, 5333, 6987, 19966, 24411, 2612, 22332, 16646, 21065, 19285, 3755, 9135, 6611, 9900, 10221, 10988, 11650, 15183, 14679, 21685, 15036, 17899, 10992, 6085, 11282, 16199, 22225, 17489, 25826, 24867, 2631, 12467, 26596, 25619, 8499, 16580, 7049, 4301, 22617, 3913, 24121, 11456, 22493, 19320, 19115, 18502, 12050, 2376, 25672, 23932, 14446, 1843, 6694, 9571, 3500, 19778, 26535, 17444, 18324, 3112, 20639, 25469, 5568, 1768, 4221, 11849, 25616, 25543, 288, 16703, 2126]), 7);