/**
 * @param {character[][]} board
 * @return {boolean}
 */
var isValidSudoku = function (board) {
    let valAndCoord = new Map(), // key: value number, val: coordinate[[i1,j1],[i2,j2]]
        coordArr = [];

    for (let i = 0; i < 9; i++) {
        for (let j = 0; j < 9; j++) {
            if (board[i][j] === ".") continue;
            const element = parseInt(board[i][j], 10);

            if (valAndCoord.has(element)) {
                coordArr = valAndCoord.get(element);
                for (let k = 0; k < coordArr.length; k++) {
                    const existedCoord = coordArr[k];
                    let isSameRow = (i - i % 3) === (existedCoord[0] - existedCoord[0] % 3),
                        isSameCol = (j - j % 3) === (existedCoord[1] - existedCoord[1] % 3);

                    if (existedCoord[0] === i || existedCoord[1] === j || (isSameRow && isSameCol)) {
                        return false;
                    }
                }
                coordArr.push([i, j]);
                valAndCoord.set(element, coordArr);
            } else {
                coordArr = [];
                coordArr.push([i, j]);
                valAndCoord.set(element, coordArr);
            }
        }
    }
    return true;
};

console.log(isValidSudoku([
    ["5", "3", ".", ".", "7", ".", ".", ".", "."],
    ["6", ".", ".", "1", "9", "5", ".", ".", "."],
    [".", "9", "8", ".", ".", ".", ".", "6", "."],
    ["8", ".", ".", ".", "6", ".", ".", ".", "3"],
    ["4", ".", ".", "8", ".", "3", ".", ".", "1"],
    ["7", ".", ".", ".", "2", ".", ".", ".", "6"],
    [".", "6", ".", ".", ".", ".", "2", "8", "."],
    [".", ".", ".", "4", "1", "9", ".", ".", "5"],
    [".", ".", ".", ".", "8", ".", ".", "7", "9"]
]), true);

console.log(isValidSudoku([
    ["8", "3", ".", ".", "7", ".", ".", ".", "."],
    ["6", ".", ".", "1", "9", "5", ".", ".", "."],
    [".", "9", "8", ".", ".", ".", ".", "6", "."],
    ["8", ".", ".", ".", "6", ".", ".", ".", "3"],
    ["4", ".", ".", "8", ".", "3", ".", ".", "1"],
    ["7", ".", ".", ".", "2", ".", ".", ".", "6"],
    [".", "6", ".", ".", ".", ".", "2", "8", "."],
    [".", ".", ".", "4", "1", "9", ".", ".", "5"],
    [".", ".", ".", ".", "8", ".", ".", "7", "9"]
]), false);

console.log(isValidSudoku([
    ["5", "3", ".", ".", "7", ".", ".", ".", "."],
    ["6", ".", ".", "1", "9", "5", ".", ".", "."],
    [".", "9", "8", ".", ".", ".", ".", "6", "."],
    ["8", ".", ".", ".", "6", ".", ".", ".", "3"],
    ["4", ".", ".", "8", ".", "5", ".", ".", "1"],
    ["7", ".", ".", ".", "2", ".", ".", ".", "6"],
    [".", "6", ".", ".", ".", ".", "2", "8", "."],
    [".", ".", ".", "4", "1", "9", ".", ".", "5"],
    [".", ".", ".", ".", "8", ".", ".", "7", "9"]
]), false);

console.log(isValidSudoku([
    [".", "1", ".", "5", "2", ".", ".", ".", "."],
    [".", ".", ".", ".", ".", "6", "4", "3", "."],
    [".", ".", ".", ".", ".", ".", ".", ".", "."],
    ["5", ".", ".", ".", ".", ".", "9", ".", "."],
    [".", ".", ".", ".", ".", ".", ".", "5", "."],
    [".", ".", ".", "5", ".", ".", ".", ".", "."],
    ["9", ".", ".", ".", ".", "3", ".", ".", "."],
    [".", ".", "6", ".", ".", ".", ".", ".", "."],
    [".", ".", ".", ".", ".", ".", ".", ".", "."]
]), false);